install_github('andreacirilloac/updateR')
install.packages('DescTools')
library(DescTools)
BinToDec(001)
BinToDec(010)
BinToDec(100)
BinToDec(101)
DecToHex(10)
DecToHex(205)
DecToHex(210)
BinToDec(100110010011)
DecToHex(2451)
DecToOct(2451)
2^5
2^8
2^9
2^12
1+2+3+256+512+4096
2^11
1+2+16+128+256+2048
install.packages('stringi')
install.packages('stringi')
library(DescTools)
BinToDec(100110010011)
DecToHex(dec)
dec <- BinToDec(100110010011)
DecToHex(dec)
DecToOct(dec)
library(rmarkdown)
library(stringi)
library('stringi')
install.package("stringi")
install.packages("stringi")
install.packages("stringi")
install.packages('stringi')
install.packages('stringi')
libbrary(stringi)
library(stringi)
install.packages('stringi')
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
2^15
2^16
.
s <- 54321 - 2^15
s
2^14
s <- s-2^14
s
2^13
2^12
5169 - 4096
2^10
1073 - 1024
knitr::opts_chunk$set(echo = TRUE)
library('DescTools')
#binair naar Decimaal
dec <- 54321
bin <- DecToBin(dec)
oct <- DecToOct(dec)
hex <- DecToHex(dec)
bin
oct
hex
8^6
5^5
54321/8
floor(54321/8)
8*6790
floor(6790/8)
6790 - 8*848
848/8
9*106
8*106
106/8
floor(106/8)
106-8*13
floor(14/8)
floor(13/8)
floor(54321/8)
floor(54321/16)
54321 - 16*3395
floor(3395/16)
3395 - 16*212
floor(212/16)
212-16*13
13-16*0
2^9 + 2^8 + 2^6 + 2^5 + 2^3 + 2^0
2^9
knitr::opts_chunk$set(echo = TRUE)
library('DescTools')
#binair naar Decimaal
bin <- 110110101
dec <- BinToDec(bin)
bin
dec
512 + 256 + 64 + 32 + 8 + 1
DecToBin(873)
2^8 + 2^7 + 2^5 + 2^4 + 2^2 + 2^0
#binair naar Decimaal
bin <- 110110101
dec <- BinToDec(bin)
hex <- DecToHex(dec)
oct <- DecToOct(dec)
dec
bin
oct
hex
#binair naar Decimaal
dec <- 54321
bin <- DecToBin(dec)
oct <- DecToOct(dec)
hex <- DecToHex(dec)
bin
oct
hex
1*8^0+2*8^1+3*8^2+4*8^3+5*8^4+6*8^5+7*8^6
OctToDec(2054353)
DecToOct(547051)
7*8^6
OctToDec(7654321)
1*8^0 + 2*8^1 +3*8^2 + 4*8^3 + 5*8^4 + 6*8^5 + 7*8^6
DecToBin(2054353)
knitr::opts_chunk$set(echo = TRUE)
library('DescTools')
BinToAll <-  function(bin){
dec <- BinToDec(bin)
hex <- DecToHex(dec)
oct <- DecToOct(dec)
dec
hex
oct
}
value <- 1001110011110010
BinToAll(value)
BinToAll <-  function(bin){
dec <- BinToDec(bin)
hex <- DecToHex(dec)
oct <- DecToOct(dec)
print(dec)
print(hex)
print(oct)
}
value <- 1001110011110010
BinToAll(value)
2^4
2^10
2^12
+
2^15
2^15
2+16+32+64+128+256+1024+2048+4096+32768
2^1+2^4+2^5+2^6+2^7+2^10+2^11+2^12+2^15
2+4
var <- 1
varr <- 2
var + varr
dec <- 54321
dec
#binair naar Decimaal
dec <- 54321
bin <- DecToBin(dec)
oct <- DecToOct(dec)
hex <- DecToHex(dec)
bin
oct
hex
value <- 101010111100
BinToAll(value)
BinToAll <-  function(bin){
dec <- BinToDec(bin)
hex <- DecToHex(dec)
oct <- DecToOct(dec)
print("Decimaal: " + dec)
print(hex)
print(oct)
}
value <- 1001110011110010
BinToAll(value)
BinToAll <-  function(bin){
dec <- BinToDec(bin)
hex <- DecToHex(dec)
oct <- DecToOct(dec)
print("Decimaal:")
print(dec)
print("Hexadecimaal:")
print(hex)
print("Octaal:")
print(oct)
}
value <- 1001110011110010
BinToAll(value)
value <- 101010111100
BinToAll(value)
hex <- "1FD"
dec <- HexToDec(hex)
dec
hex <- "1FD"
dec <- HexToDec(hex)
dec
bin <- DecToBin(dec)
bin
hex <- "1fd"
dec <- HexToDec(hex)
dec
bin <- DecToBin(dec)
bin
14+15*16+16^2
14+15*16+16^2
13+15*16+16^2
hex <- "1fd"
dec <- HexToDec(hex)
dec
bin <- DecToBin(dec)
bin
oct <- DecToOct(dec)
hex <- "1fd"
dec <- HexToDec(hex)
dec
bin <- DecToBin(dec)
bin
oct <- DecToOct(dec)
oct
bin <- 101011000111
BinToAll(bin)
1/16
0.1125/0.0625
DecToBin(63)
library('DescTools')
DecToBin(63)
DecToBin(212)
DecToBin(182)
1/1
1/2
1/4
1/8
1/16
DecToBin(126)
1/16
1/16+1/(16^2)
4/16
library('DescTools')
DecToBin(10+127)
DecToBin(-13+127)
DecToBin(43)
DecToBin(43+127)
DecToBin(-52+127)
DecToBin(52)
install.packages('threadr')
install.packages('‘binaryLogic’')
install.packages('binaryLogic')
library(binaryLogic)
as.binary(-22,signed = TRUE)
DecToBin(22)
as.binary(-22,signed = TRUE, size=1)
DecToBin(12)
as.binary(-22,signed = TRUE) + as.binary(-12,signed = TRUE)
BinToDec(11011110) - 1
DecToBin(221)
as.logical(as.binary(11,signed = TRUE))
as.logical(as.binary(11,signed = TRUE))*1
as.binary(-5,signed = TRUE)*1
as.binary(-5,signed = TRUE, n=1)*1
as.binary(-5,signed = TRUE, size=1)*1
as.binary(11,signed = TRUE, size=1)*1
as.binary(-5,signed = TRUE, size=1) /
+
s
as.binary(-5,signed = TRUE, size=1) + as.binary(11,signed = TRUE, size=1)
as.binary(-13,signed = TRUE, size=1) + as.binary(-15,signed = TRUE, size=1)
as.binary(-13,signed = TRUE, size=1)
as.binary(-15,signed = TRUE, size=1)
BinToDec(1 1 1 0 0 1 0 0)
BinToDec(11100100) -1
DecToBin(227)
library('DescTools')
library(binaryLogic)
DecToBin(87)
DecToBin(87+127)
DecToBin(127-87)
as.binary(-87,signed=TRUE,size=1)
1 1 1 0 0 1 0 0
BinToDec(11100100)-1
DecToBin(227)
4+8+16
as.binary(100,signed=TRUE,size=1)
as.binary(-64,signed=TRUE,size=1)
as.binary(-64,signed=TRUE,size=1) + as.binary(100,signed=TRUE,size=1)
as.binary(-64,signed=TRUE,size=2) + as.binary(100,signed=TRUE,size=2)
library('DescTools')
library(binaryLogic)
HexToDec(41E00000)
HexToDec(E)
HexToDec(e)
HexToDec('e')
BinToDec(10000011)
HexToDec(C)
HexToDec('C')
HexToDec('CE100000')
HexToDec('ce100000')
BinToDec(10011100)
156-127
BinToDec(10000111)
1,5 * 2^8
1.5 * 2^8
DecToBin(148.25)
BinToDec(10010100)
DecToBin(134)
DecToBin(149)
BinToDec(01111111)
DecToHex(c)
DecToHex('c')
HexToDec('c')
BinToDec(10000101)
BinToDec(1111010)
DecToBin(539)
DecToBin(136)
HexToDec(C)
HexToDec("C")
DecToBin(538)
DecToBin(538)
DecToBin(136)
df <- data.frame()
view(df)
View(df)
library(readxl)
schakelingen <- read_excel("education/ITFundamentals/R-solutions/ITF-solutions/data/schakelingen.xlsx")
View(schakelingen)
setwd("~/education/ITFundamentals/R-solutions/ITF-solutions")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
schakelingen <- read_excel("../data/schakelingen.xlsx")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
schakelingen <- read_excel("data/schakelingen.xlsx")
View(schakelingen)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
oef1 <- read_excel("data/schakelingen.xlsx")
View(schakelingen)
oef1
oef1$`niet A`<- !oef1$A
oef1
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
oef1 <- read_excel("data/schakelingen.xlsx")
View(schakelingen)
oef1
oef1$`niet A` <- !oef1$A
View(oef1)
View(oef1)
?Logic
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
oef1 <- read_excel("data/schakelingen.xlsx")
View(schakelingen)
xor <- function (x, y)
{
return ((x | y) & !(x & y))
}
nand <- function(x, y)
{
return !(x & y)
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
oef1 <- read_excel("data/schakelingen.xlsx")
View(schakelingen)
xor <- function (x, y)
{
return ((x | y) & !(x & y))
}
nand <- function (x, y)
{
return (! (x & y))
}
nand(1,1)
oef1
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
View(oef1)
View(oef1)
oef1
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1$`R XOR C` <- xor(oef1$`niet A NAND B = R`,oef1$C)
oef1
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1$`R XOR C` <- xor(oef1$`niet A NAND B = R`,oef1$C)
cols <- sapply(oef1, is.logical)
dat[,cols] <- lapply(oef1[,cols], as.numeric)
cols
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1$`R XOR C` <- xor(oef1$`niet A NAND B = R`,oef1$C)
cols <- sapply(oef1, is.logical)
oef1[,cols] <- lapply(oef1[,cols], as.numeric)
oef1
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
oef1 <- read_excel("data/schakelingen.xlsx")
View(schakelingen)
xor <- function (x, y)
{
return ((x | y) & !(x & y))
}
nand <- function (x, y)
{
return (! (x & y))
}
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1$`R XOR C` <- xor(oef1$`niet A NAND B = R`,oef1$C)
cols <- sapply(oef1, is.logical)
oef1[,cols] <- lapply(oef1[,cols], as.numeric)
oef1
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
# We definiëren de xor poort, want die zit niet standaard in R
xor <- function (x, y)
{
return ((x | y) & !(x & y))
}
# We definiëren de nand poort, want dit zit niet standaard in R
nand <- function (x, y)
{
return (! (x & y))
}
oef2 <- oef1 <- read_excel("data/schakelingen2.xlsx")
oef2 <- oef1 <- read_excel("data/schakelingen2.xlsx")
oef2$`A XOR B = R` <- xor(oef2$A,oef2$B)
oef2$`A AND B = Q` <- oef2$A & oef2$B
oef2$`ROF Q = M` <- oef2$`A XOR B = R` | oef2$`A AND B = Q`
oef2
oef2 <- oef1 <- read_excel("data/schakelingen2.xlsx")
oef2$`A XOR B = R` <- xor(oef2$A,oef2$B)
oef2$`A AND B = Q` <- oef2$A & oef2$B
oef2$`ROF Q = M` <- oef2$`A XOR B = R` | oef2$`A AND B = Q`
cols <- sapply(oef2, is.logical)
oef2[,cols] <- lapply(oef2[,cols], as.numeric)
oef2 <- oef1 <- read_excel("data/schakelingen2.xlsx")
oef2$`A XOR B = R` <- xor(oef2$A,oef2$B)
oef2$`A AND B = Q` <- oef2$A & oef2$B
oef2$`ROF Q = M` <- oef2$`A XOR B = R` | oef2$`A AND B = Q`
cols <- sapply(oef2, is.logical)
oef2[,cols] <- lapply(oef2[,cols], as.numeric)
oef2
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(readxl)
library(kableExtra)
# We definiëren de xor poort, want die zit niet standaard in R
xor <- function (x, y)
{
return ((x | y) & !(x & y))
}
# We definiëren de nand poort, want dit zit niet standaard in R
nand <- function (x, y)
{
return (! (x & y))
}
oef3 <- read_excel("data/schakelingen3.xlsx")
oef3 <- read_excel("data/schakelingen3.xlsx")
oef3$`A ! XOR B = R` <- !(xor(oef3$A,oef3$B))
oef3 <- read_excel("data/schakelingen3.xlsx")
oef3$`A ! XOR B = R` <- !(xor(oef3$A,oef3$B))
oef3$`B AND C =  P` <- oef3$B & oef3$C
oef3$`R AND B` <- oef3$`A ! XOR B = R` & oef3$B
oef3$`P OF B` q <- oef3$`B AND C =  P` | oef3$B
oef3 <- read_excel("data/schakelingen3.xlsx")
oef3$`A ! XOR B = R` <- !(xor(oef3$A,oef3$B))
oef3$`B AND C =  P` <- oef3$B & oef3$C
oef3$`R AND B` <- oef3$`A ! XOR B = R` & oef3$B
oef3$`P OF B`  <- oef3$`B AND C =  P` | oef3$B
oef3 %>%
kbl() %>%
kable_material_dark()
oef3 <- read_excel("data/schakelingen3.xlsx")
oef3$`A ! XOR B = R` <- !(xor(oef3$A,oef3$B))
oef3$`B AND C =  P` <- oef3$B & oef3$C
oef3$`R AND B` <- oef3$`A ! XOR B = R` & oef3$B
oef3$`P OF B`  <- oef3$`B AND C =  P` | oef3$B
cols <- sapply(oef3, is.logical)
oef3[,cols] <- lapply(oef3[,cols], as.numeric)
oef3 %>%
kbl() %>%
kable_material_dark()
?Logica
?logica
# Voor de gemakkelijkheid lezen we de data set in
oef1 <- read_excel("data/schakelingen.xlsx")
oef1$`niet A` <- !oef1$A
oef1$`niet A NAND B = R` <- nand(oef1$`niet A`,oef1$B)
oef1$`R AND C` <- oef1$`niet A NAND B = R` & oef1$C
oef1$`R XOR C` <- xor(oef1$`niet A NAND B = R`,oef1$C)
cols <- sapply(oef1, is.logical)
oef1[,cols] <- lapply(oef1[,cols], as.numeric)
oef1 %>%
kbl() %>%
kable_material_dark()
View(oef1)
View(oef1)
